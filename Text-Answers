# NOTE
This file should contain the answers to the text questions. Answers that aren't mentioned here are likely explained throughout the files related to that particular assignment.

c. Using k8s's autoscaling feature, assuming a hypothetical scenario where exeeding 50% CPU usage would be considered our danger line, we implement the following kubectl command:
"kubectl autoscale deployment DEPLOYMENT --cpu-percent=50 --min=1 --max=10"
d. Essentially we have 2 kinds of scaling - Horziontal and and Vertical.
Horizontal - Adds or removes pods
Vertical - Modifies CPU and/or RAM resources allocated to a Pod.
As I understand the question and as you said autoscaling groups will scale my nodes but not the pods, then the answer I've given now to question "c" handles the pod deploying part, and now this questions says that pods are being scaled fast enough so THIS is where autoscaling comes into play, which I've implemented in the construction of the cluster through terraform.
f. Created it manually, index.html is just a file I uploaded to "ory-bucket" that says "<h1>Hi</h1>"
g. To restrict access to that bucket for specific people I'd have to use AWS's IAM functionality. 
This is the procedure I would follow:
Open the IAM console.
From the console, open the IAM user or role that should have access to only a certain bucket.
In the Permissions tab of the IAM user or role, expand each policy to view its JSON policy document.
In the JSON policy documents, search for the policy that grants the user permission to the s3:ListAllMyBuckets action or to s3:* actions (all S3 actions).
Modify the policy to remove permission to the s3:ListAllMyBuckets action. (because I want him to have access only to the bucket, else I dont need to do this)
Then, add permission to s3:ListBucket only for the bucket or folder that I want the user to access from the console.

The following example policy is for access to a bucket. The policy allows the user to perform the s3:ListBucket, s3:PutObject, and s3:GetObject actions only on the static html file I created:
{
   "Version":"2012-10-17",
   "Statement":[
      {
         "Effect":"Allow",
         "Action":[
            "s3:ListBucket"
         ],
         "Resource":"arn:aws:s3:::ory-bucket"
      },
      {
         "Effect":"Allow",
         "Action":[
            "s3:PutObject",
            "s3:GetObject"
         ],
         "Resource":"arn:aws:s3:::ory-bucket/*"
      }
   ]
}

However, if we're talking about restricting access to people from outside: By default, all S3 buckets are private and can be accessed only by users that are explicitly granted access. When using AWS, it's a best practice to restrict access to your resources to the people that absolutely need it.

Specifically, Writing bucket policies that define access to specific buckets and objects. You can use a bucket policy to grant access across AWS accounts, grant public or anonymous permissions, and allow or block access based on conditions.

This is especially useful for when your bucket is enabled as a static website. You can use a bucket policy to make everything in the bucket read-only.
Clean and easy to review, bucket policies are data-centric permissions.
If you're not just serving a static website allowing public access is usually considered against best practice.
For example, this should allow public read access to my static website if I were to allow it:

{
    "Version": "2008-10-17",
    "Statement":[
    {
        "Sid":"AllowPublicRead",
        "Effect":"Allow",
        "Principal": {
            "AWS":"*"
        },
        "Action":"s3:GetObject",
        "Resource":"arn:aws:s3:::ory-bucket/*"
    }
    
